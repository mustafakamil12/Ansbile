======================================================== Ansible For absolute beginner ===========================================



================================================================ Introduction ====================================================

# Ansible: Ansible is an open-source software provisioning, configuration management, and application-deployment tool enabling 
  infrastructure as code.

# Why Ansible:
	i. Provisioning
	ii. Configuration Management
	iii. Continuous Delivery
	iv. Application Deployment
	v. Security Compliance

# There many of examples that Ansible really can be the most powerfull tool to use with:
	i. if u have many web servers and database servers, you need to reboot these servers, u can write a play book to start power off the web servers first and then power off the database servers and then power on db servers and then web servers.

	ii. another good one, if u have a complex infrastructure that span cross public and private clouds running 100's of vms. u can easly spin vms in both clouds as well u can connect Ansible to db or service now so it will spin up asap.

# all required info are in: https://docs.ansible.com/

================================================================== Setup Lab =====================================================

# we will use VirtualBox to set the lab.
	i. we will create multiple vms for the lab
		- Template: will be used to create the other requierd vms
		- Ansible controller
		- target01
		- target02
	ii. we will use pre installed and pre configured virtual images on --> osboxes.org

	iii. in the osboxes select VM Images --> VirtualBox Images --> CentOS --> download the latest version and 64
		- Username: osboxes
		- Password: osboxes.org
		- Root Account Password: osboxes.org

	iv. configuration:
		- Name: centos-template
		- type: linux
		- version: other linux 64
		- Memory: 2048 MB
		- processor: 2
		- network: bridge

	v. clone from the template:
		- Name: ansibel-controller / ansible-target1 /ansible-target2
		- path: /Users/mustafaalogaidi/VirtualBox VMs
		- Mac Address Policy: Generate new MAC address for all network adapters
		- Linked Clone

	vi. change host name
		- sudo vi /etc/hostname --> ansiblecontroller / target1 / target2
		- sudo vi /etc/hosts    --> host ansiblecontroller
		- sudo shutdown now -r

	vii. install ansible on the controller
		- sudo yum install epel-release
		- sudo yum install ansible
		- ansible --version

================================================================== Inventory =====================================================

# Ansible deal with one or multi servers at the same time in the infra.

# Ansible need to establish connection to the servers in the infra.

# Ansible establish connection ---- SSH for linux 					(ssh)
								 |_ PowerShell Remote for windows	(winrm)

# Ansible is agent less, nothing need to be installed to the target systems.

# information about target systems stored in Inventory file

# if u don't create Inventory file, Ansible will automatically used the default inventory file in --> /etc/ansible/hosts

# Inventory file is like ini file

# we can add an alias in the begining of the line of each server in the Inventory file, and assign the server address to the ansible_host parameter
# ansible_host: is an invetory paramter use to specify the FQDN or IP address of the server.

# additional Inventory parameters:
	• ansible_connection – ssh/winrm/localhost  --> how ansible connect to the server
	• ansible_port – 22/5986					--> defines which port to connect to
	• ansible_user – root/administrator			--> defines user
	• ansible_ssh_pass - Password				--> defines ssh password
	• ansible_password - password 				--> defines winrm password

# now we need to do a simple test to check the connectivity between controller and targets

	> ssh <target ip> 
	- if there's any issue with ssh, that's mean we need to configure ssh on the targets.
	- open https://fedoraproject.org/wiki/EPEL in the browser
	- copy link of "epel-release-latest-8"
	- wget <link from step above>
	- rpm -ivh epel-release-*-*.noarch.rpm   --> where * version number, file already will be available on the directory.
	- sudo yum install sshpass -y
	- sudo shutdown now -r

	- if the above not working or take to long:
	- sudo vi /etc/ssh/ssh_config
	- enable port 22

# now let's create an Inventory file in the controller
 	- mkdir test-project
 	- cd test-project
 	- cat > inventory.txt
 	  target1 ansible_host=192.168.0.20 ansible_ssh_pass=osboxes.org   --> target1 is an alias to the target system

# let's run ansible command:
	- be sure that u already ssh to targets meachines before apply the command below.
	
	- ansible target1 -m ping -i inventory.txt   -> -m module  -i inventory
	
	- if ping success u will get pong as response
	
	- if u didn't already ssh to a target machine and try to apply the command above, it will failed with ssh error.
	
	- u can pass the issue above by disable host_key_checking  
	- vi /etc/ansible/ansible.cfg
	- uncomment -->  host_key_checking = False
	- the way above is not safe


=================================================================== YAML =========================================================

# YAML: is a human-readable data-serialization language.
# it used to store collection of data.
# data defined in yaml file in the format of key: value.
# rember there's a space befor value.

# let's take an example for key value pair:

	Fruit:	Apple
	Vegetable:	Carrot
	Liquid:	Water
	Meat:	Chicken

# another example of array in yaml:

	Fruites:
	- Apple		<-- the dash infront indicat that it's element of the array
	- Orange
	- Banana

	Vegetables:
	- Tomato
	- Carrot
	- Cauliflower

# now let's talk about dictionary which is a set of properties which grouped together under an item 

	Banana:					<--- hash/map
		calories: 105		<--- direct value
		fat: 0.4 g
		carbs: 27 g
	Grapes:
		calories: 62
		fat: 0.3 g
		carbs: 16 g

	- hash/map is identation senstive
	- u can either assign direct value or hash/map
	- in the hash/map be sure that u use equal spaces.


# let's go to the next level list --> dict. --> list
 	
 	- to store different properties of single object we use dictionary.
 	- a good example is car properties

 		simple dictionary (key: value)
 		
 		car --> color: blue
 				model: corvette
 				transmission: manual
 				price: 20,000

 	- now if we want to split model to year and name in this case we will have dictionary within dictionary

 		car --> color: blue
 				model: 
 					name: corvette
 					year: 1995
 				transmission: manual
 				price: 20,000

 	- now what if we have 6 different cars.
 		i. in this case we need to store them in a list or array of the same type of object, like:

 			-	blue corvette
 			-	grey corvette
 			-	red corvette
 			-	green corvette
 			-	blue corvette
 			-	black corvette

 		ii. now if we need to store all information for each car, model, name, year, transmission and price, we need to modify the array from array of string to array of dictionary

			-	color: blue
 				model: 
 					name: corvette
 					year: 1995
 				transmission: manual
 				price: 20,000

 			-	color: grey
 				model: 
 					name: corvette
 					year: 1995
 				transmission: manual
 				price: 20,000

 			-	color: red
 				model: 
 					name: corvette
 					year: 1995
 				transmission: manual
 				price: 20,000

 			-	color: green
 				model: 
 					name: corvette
 					year: 1995
 				transmission: manual
 				price: 20,000

 			-	color: blue
 				model: 
 					name: corvette
 					year: 1995
 				transmission: manual
 				price: 20,000

 			-	color: black
 				model: 
 					name: corvette
 					year: 1995
 				transmission: manual
 				price: 20,000


 		iii. let's take some notes:

 			- dictionary: unordered (elements)
 			  list: ordered



================================================================ Playbook ========================================================

# ansible planybooks are ansible's orchestration language

# it's set of instructions you provide ansible to work it's magic.

# let's take a look on simple and complex ansible playbook

# Simple Ansible Playbook

- Run command1 on server1
- Run command2 on server2
- Run command3 on server3
- Restarting server1
- Restarting server2
- Restarting server3

# Complex Ansible Playbook

- Deploy 50 VMs on Public Cloud
- Deploy 50 VMs on private Cloud
- Provision Storage to all VMs
- Setup Network Configuration on Private VMs
- Setup cluster configuration
- Configure Web server on 20 Public VMs
- Configure DB server on 20 Privatge VMs
- Setup Loadbalancing between web server VMs
- Setup Monitoring components
- Install and Configure backup clients on VMs
- Update CMDB database with new VM Information

# all playbook written in yaml format --> playbook.yml

# Playbook –> A single YAML file that contain plays.
 	- Play – Defines a set of activities (tasks) to be run on hosts
	- Task – An action to be performed on the host like:
		i. Execute a command 
		ii. Run a script 
		iii. Install a package
		iv. Shutdown/Restart

# let's take a look on a real simple ansible playbook.yml

-
  name: Play 1
  hosts: localhost
  tasks:
	- name: Execute 
	  command: date
	- name: Execute script on server 
	  script: test_script.sh
	- name: Install httpd service 
	  yum:
		name: httpd
		state: present
	- name: Start web server
	  service:
		name: httpd
		state: started

# The playbook above is 
	1. single play
	2. named play 1 
	3. the goal of this play is to run set of activities one after the other on the:
	4. localhost
	5. the host that u wanna to run these actions is defined at play level
	6. in our case we just wanna test on our localhost, that's why hosts is set to localhost
	7. hosts could be anything from your Inventory file.  <--- important
	8. tasks to be implement on the target which is localhost. :)

# let's take a look on this example where there're 2 plays in one playbook

# The playbook contain a list of 2 plays, that's mean the playbook is a list of dictionaries 

# each paly is a dictionary and had set of properties: name, hosts and tasks

# in the hosts you can specify any host or group but you must be sure that host or group first defined in the Inventory.

# if u specify a group in the hosts, the listed tasks will be executed on all the hosts listrd under that group.

-
  name: Play 1
  hosts: localhost
  tasks:
	- name: Execute 
	  command: date
	- name: Execute script on server 
	  script: test_script.sh

-
  name: Play 2
  hosts: localhost
  tasks:
	- name: Install httpd service 
	  yum:
		name: httpd
		state: present
	- name: Start web server
	  service:
		name: httpd
		state: started

# general example of inventory

localhost

server1.company.com
server2.company.com

[mail]
server3.company.com
server4.company.com

[db]
server5.company.com
server6.company.com

[web]
server7.company.com
server8.company.com

# if u go back to playbook example and exactly on tasks u can see we used:
	- command
	- script
	- yum
	- service

	- These are modules, there are 100s of module that u can get all info. required on the ansible docs. or by use the command 
	> ansible-doc -l

# to execute any playbook use
	> ansibile-playbook playbook.yml

# for help about to execute ansible playbook
	> ansible-playbook --help

# u can use ansible command directly in the contrller just for testing connectivity between controller and the target
	- let's take ping command above as an example, it's used once without playbook and that's it.
	- let's take a look on this commands.
	> ansible <target> -a <command> -i inventory.txt
	> ansible all -a "/sbin/reboot" -i inventory.txt  <-- used to reboot all servers.
	>ansible <target> -m <module> -i <inventory>
	> ansible target1 -m ping -i inventory.txt

	- if u need to ping both targets
	> ansible all -m ping -i inventory.txt

# instead of using commands individually, we can use playbook to apply multi task in one line.
	
	- let's create a playbook file first
	> vi playbook-pingtest.yml
	-
	 name: Test connectivity to target servers
	 hosts: all
	 tasks:
	  - name: Ping test
	    ping:

# now to execute the playbook above
	> ansible-playbook playbook-pingtest.yaml -i inventory.txt


------------------------------------------------------------- How to use Atom ----------------------------------------------------

# when u r working with big project it's better to use ide instead of using vi.

# Download atom ide

# now create project in atom with <ansible-demos-excercises> for example and test purposes.

# create directory in the ansible-controller with same name <ansible-demos-excercises>

# in atom within <ansible-demos-excercises> create a directory named <exercise-0-pingtest> 

# within exercise-0-pingtest create a file named <inventory.txt>

# there're many ways to test ur code's syntax if it's ok or not
	- u can use YAML Lint from ur web browser
	- u can google atom yaml lint to get atom package <linter-js-yaml>
		> use this command to install the package
		> apm install linter-js-yaml

# inventory.txt will include:
	target1 ansible_host=192.168.0.30 ansible_connection=ssh ansible_ssh_pass=osboxes.org
	target2 ansible_host=192.168.0.32 ansible_connection=ssh ansible_ssh_pass=osboxes.org

# playbook-pingtest.yml will include:
	-
	  name: Test Connectivity To Target Servers
	  hosts: all
	  tasks:
	   - name: Ping test
	     ping:


# now we can just copy the files above to the controller using FileZilla but working with large number files it's good to use:

# Remote sync package for atom. to sync files in your local system with remote controller.
	- install the package using the command below:
	> apm install remote-sync

# now R.C on the root directory in ur atom and u can see --> Remote Sync. :)

# to configure ur Remote Sync: R.C on root directory in atom --> Remote Sync --> configure 
 - Hostname: 192.168.0.25	or 127.0.0.1 <-- controller IP.
 - Port: 22 or 1111 :)
 - Target directory: /home/osboxes/ansible-demos-excercises
 - Username: osboxes
 - Password: osboxes.org
 - UploadOnSave: √

# now R.C on the ansible-demos-excercises folder in atom --> Upload Folder 

# check ur files now on the target controller.

# sometime when u copy file from folder to another (for example the inventory file from exercise-0-pingtest to exercise-1-pingtest) maybe it's not been sync to the target coz there's no change and no new save in the file that's mean (UploadOnSave) it will not work and so we need to R.C --> Remote Sync --> Upload Folder.


============================================================== Ansible Modules ===================================================

# ansible modules are categorized into various group based on their functionality

	• System 		--> actions to be perfomed at system level
 	• Commands 		--> used to execute commands or scripts on the target system
	• Files 		--> work with files
	• Database 		--> work with databases
	• Cloud 		--> work with clouds
	• Windows 		--> to use ansible in windows environment
	• More..

	-System: 	 
				 - User
				 - Group
				 - Hostname
				 - Iptables
				 - Lvg
				 - Lvol
				 - Make
				 - Mount
				 - Ping
				 - Timezone
				 - Systemd
				 - Service

	- Commands: 
				- Command
				- Expect
				- Raw
				- Script
				- Shell

	- Files: 	
				- Acl
				- Archive
				- Copy
				- File
				- Find
				- Lineinfile
				- Replace
				- Start
				- Temple
				- Unarchive

	- Database: 
				- Mongodb
				- Mssql
				- Mysql
				- Postgresql
				- Proxysql
				- vertica

	- Cloud:    
				- Amazon
				- Atomic
				- Azure
				- Centurylink
				- Cloudscale
				- Cloudstack
				- Digital Ocean
				- Docker
				- Google
				- Linode
				- Openstack
				- Rackstack
				- Smartos
				- Softlayer
				- VMware

	- Windows:  
				- Win_copy
				- Win_command
				- Win_domain
				- Win_file
				- Win_iis_website
				- Win_ msg
				- Win_msi
				- Win_package
				- Win_ping
				- Win_patch
				- Win_path
				- Win_robocopy
				- Win_regedit
				- Win_shell
				- Win_service
				- Win_user

# there're a lot of modules used in ansible all available in doc.

# sometime in command document u see this phrase <free_form>: this mean this command is free_form and not accepted parameters like cat.

# one of the other important module is <Script>: runs local script on a remote node after transfering it.
	- copy script to remote systems
	- execute script on remote systems

# another good module is <service>: used to maintain service on target system
	- start
	- stop
	- restart

	- it's not fre_form so that's mean it's need parameters like name and state
	- there're 2 ways to pass the parameters 
		i. pass as parameters of service:
			service: name=postgresql state=started

		ii. pass as dictionary map format:
			service:
				name: postgresql
				state: started

# look at the playbook below:
	-
	name: Start Services in order hosts: localhost
	tasks:
		- name: Start the database service 
		  service: name=postgresql state=started

		- name: Start the httpd service 
		  service: name=httpd state=started

		- name: Start the nginx service service:
		       name: nginx
		       state: started 

# the question is why state is <started and not start>?  <-- idempotency
	- that to Ensure service httpd is started
	  If httpd is not already started => start it 
	  If httpd is already started, =>do nothing

# another butiful module is linefile used to search for a line in a file and replace it or add it if doesn't exist.
	- need to add 1 new lines to /etc/resolv.conf
		nameserver 10.1.250.10

	- so the playbook will be:

		-
			name: Add DNS server to resolv.conf 
			hosts: localhost
			tasks:
				- lineinfile:
				path: /etc/resolv.conf
				line: 'nameserver 10.1.250.10'

	- but if u take a look on the script above u can see that we can do the same with shell script below:
		- #Sample script
			> echo “nameserver 10.1.250.10” >> /etc/resolv.conf

	- the problem with shell script if u run this script multiple time u will see that the required line will be added multiple times.


================================================================ Variables =======================================================

# variables use jinja2 templating

# variable can be defined in playbook under vars directive as key value

# take a look on the playbook below:

 -
	name: Add DNS server to resolv.conf 
	hosts: localhost
	vars:
		dns_server: 10.1.250.10
    tasks:
        - lineinfile:
			path: /etc/resolv.conf
			line: 'nameserver '{{dns_server}}'
 

# another way to define variable within inventory file

	-
		name: Set Firewall Configurations 
		hosts: web
		tasks:
			- firewalld:
				service: https 
				permanent: true 
				state: enabled
		
			- firewalld: 
				port: '{{http_port}}'/tcp 
				permanent: true
				state: disabled
			- firewalld:
				port: '{{snmp_port}}'/udp 
				permanent: true
				state: disabled
			- firewalld:
				source: '{{inter_ip_range}}'/24 
				Zone: internal
				state: enabled

# we can use the variables in the inventory, look at the inventory file below:

#Sample Inventory File
	
	Web  http_port=8081	snmp_port=161-162 	inter_ip_range=192.0.2.0

# best scenario is to create variable file with the name of the host:

#Sample variable File – web.yml   <-- host variable file

	http_port: 8081 
	snmp_port: 161-162 
	inter_ip_range: 192.0.2.0

# Jinja2 Example:
	source: {{ inter_ip_range }} 					<--- x
	source: ‘{{ inter_ip_range }}’					<--- √
	source: SomeThing{{ inter_ip_range }}SomeThing	<--- √


================================================================ Conditionals ====================================================

# we can use conditional to reduce the number of playbooks instead we can use any kind of conditions to work with different case

# only when a condition is true then the task will be implement

# take a look at the playbook below, insted of using 2 sperate playbook:

	---
	- name: Install NGINX
	  hosts: all
	  tasks:
		- name: Install NGINX on Debian
		  apt:
			name: nginx 
			state: present

		  when: ansible_os_family == "Debian" and
				ansible_distribution_version == "16.04"
	
		- name: Install NGINX on Redhat 
		  yum: 
			name: nginx
			state: present
	      when: ansible_os_family == "RedHat" or
	      		ansible_os_family == "SUSE"

# ansible_os_family is a built-in variable that ansible populate with the flavor of operating system.

# we can use conditional within a loop so instead of using single package for example above we can use list of them.

	---
	- name: Install Softwares
	  hosts: all 
	  vars:
	     packages:
	        - name: nginx
	          required: True
	        - name: mysql
	          required : True
	        - name: apache
	          required : False
	  tasks:
	  - name: Install "{{ item.name }}" on Debian
	    apt:
	      name: "{{ item.name }}"
	      state: present
	    
	    when: item.required == True
	    loop: "{{ packages }}"

# another good example:
	- name: Check status of a service and email if its down 
	  hosts: localhost
	  tasks:
	    - command: service httpd status
	      register: result				<-- to register output
	    
	    -  mail:
	        to: admin@company.com
	        subject: Service Alert
	        body: Httpd Service is down
	        when: result.stdout.find('down') != -1


================================================================== Loops =========================================================

# loops is a directive to execute the same task multiple number of times.

# There's 2 ways to use loop in playbook
	a. loop:   		<-- used for simple loops
	b. with_: 		<-- in old version thers' only <with_items> for loop.

# item is a default loop variable.

# to understand how loops work u need to visualize loops:
	
	i. original playbook that will be used...

	-
	  name: Create users
	  hosts: localhost
	  tasks:
	   - user: name='{{ item }}'	state=present
		 loop:
			- joe
			- george 
			- ravi
			- mani
			- kiran 
			- jazlan 
			- emaan 
			- mazin 
			- izaan 
			- mike
			- menaal 
			- shoeb 
			- rani
	
	ii. loops visualized:

	-
	  name: Create users
	  hosts: localhost
	  tasks:

	  -  var:  item=joe
	     user: name= "{{ item }}"		state=present
	
	  - var: item=george				
		user: name= "{{ item}}"			state=present
	
	  - var: item=ravi					
	    user: name= "{{ item }}"		state=present
	  
	  - var: item=mani
		user: name= "{{ item }}"		state=present
	  
	  - var: item=kiran
		user: name= "{{ item }}"		state=present
	  
	  - var: item=jazlan
		user: name= "{{ item }}"		state=present

	  - var: item=emaan
	    user: name= "{{ item }}"		state=present
	
	  - var: item=mazin
		user: name= "{{ item }}"		state=present
	  
	  - var: item=izaan
		user: name= "{{ item }}"		state=present

# but in the example above we have array of strings, what if we need to add uid for each user?
	- The soulution is to pass array of dictionary :)

	-
	  name: Create users
	  hosts: localhost
	  tasks:
		- user: name='{{ time.name }}'		state=present 	uid=1'{{ time.uid }}'
		loop:

		  - name: joe       --|-->  or we can use json format - 
		  	uid: 1010		--| 
		  - name: george
		  	uid: 1011
		  - name: ravi
		  	uid: 1012
		  - name: mani
		  	uid: 1013
		  - name: kiran		  
		  	uid: 1015
		  - name: jazlan
		  	uid: 1015
		  - name: emaan
		  	uid: 1016
		  - name: mazin
		  	uid: 1017
		  - name: izaan
		  	uid: 1018
		  - name: mike
		  	uid: 1019
		  	
# there're a long list of look up can be used with <with_*****> 

	with_items
	with_file
	with_url
	with_mongodb
	with_dict
	with_etcd
	with_env
	with_filetree
	With_ini
	With_inventory_hostnames
	With_k8s
	With_manifold
	With_nested
	With_nios
	With_openshift
	With_password
	With_pipe
	With_rabbitmq
	With_redis
	With_sequence
	With_skydive
	With_subelements
	With_template
	With_together
	With_varnames	 

# look up is just like simple script that can do a specific task


=================================================================== Roles ========================================================

# Role:  is a set of tasks to configure a host to serve a certain purpose like configuring a service. for example confiuring a server to be database server ...etc.

# instead of re-writing the required tasks hundreds of time we can package it in a role and re-use the role ...etc. it's to make your work re-usable

# for example to get database server we need to apply set of tasks to get our goal as well for web server and so on.

	i. mysql
		- Installing Pre-requisites 
		- Installing mysql packages 
		- Configuring mysql service 
		- Configuring database and users

	ii. nginx
		- Installing Pre-requisites 
		- Installing nginx packages 
		- Configuring nginx service 
		- Configuring custom web pages

# let's take a look on the playbook below without using role:

	- name: Install and Configure MySQL 
	  hosts: db-server
	  tasks:
	     - name: Install Pre-Requisites
	       yum: name=pre-req-packages state=present
	     - name: Install MySQL Packages
	       yum: name=mysql state=present
	     - name: Start MySQL Service
	       service: name=mysql state=started
	     - name: Configure Database
	       mysql_db: name=db1 state=present

# now the same playbook but using role:

	- name: Install and Configure MySQL 
	  hosts: db-server1......db-server100
	  roles:
	      - mysql

# create mysql role

	tasks:
	   - name: Install Pre-Requisites
	     yum: name=pre-req-packages state=present
	   - name: Install MySQL Packages
	     yum: name=mysql state=present
	   - name: Start MySQL Service
	     service: name=mysql state=started
	   - name: Configure Database
	     mysql_db: name=db1 state=present

# role is introduce a set of best practices that must be followed to organized, for example all tasks in the tasks directory and vars must go to vars directory and so one, please take a look on the list below:

MySQL-Role

	i. tasks - directory

		tasks:
		   - name: Install Pre-Requisites
		     yum: name=pre-req-packages state=present 
		   - name: Install MySQL Packages
		     yum: name=mysql state=present
		   - name: Start MySQL Service
		     service: name=mysql state=started
		   - name: Configure Database
		     mysql_db: name=db1 state=present


    ii. vars - directory

		mysql_packages:
		  - mysql
		  - mysql-server
		db_config:
		   db_name: db1

	iii. defaults - directory

		mysql_user_name: root
		mysql_user_password: root

	iv. handlers - directory

	v. templates - directory

# u can access ansible galaxy and find thousands of roles shared over there. :)

# now we talked about different directories will be used for roles, u don't need to create them manually, ansible can take care of it.

# to build skelton for u
	> ansible-galaxy init mysql

	- it will create the skelton as below:
	- mysql
		|- README.md 
		|- templates
		|- tasks 
		|- handlers
		|- vars 
		|- defaults
		|- meta	

	- to use role within ur playbook there're multiple ways to do
		i. my-playbook 			<-- create folder 
				|- playbook.yml
				|- roles 		<-- move mysql skelton above into it.
					|- mysql
						|- README.md 
						|- templates
						|- tasks 
						|- handlers
						|- vars 
						|- defaults
						|- meta	

				--> playbook.yml
					- name: Install and Configure MySQL 
					  hosts: db-server
					  roles:
					      - mysql

		ii. or move roles to a commone directory disgnated for roles in ur system at 
			
			- /etc/ansible/roles  	<-- the default location that ansible looking for roles

			- and u can find this in ansible configuration, u can change it as well if u need.
				> /etc/ansible/ansible.cfg
   				  roles_path  = /etc/ansible/roles


# u have 2 ways to search for a role:
	i. search in the ansible galaxy web page
	ii use command lind
		> ansible-galaxy search mysql

	iii. to use the specific mysql
		> ansible-galaxy install geerlingguy.mysql


# there're 2 ways to use role in playbook
	i. use the name of the role as array of string:
		>>playbook.yml<<
		-
			name: Install and Configure MySQL 
			hosts: db-server
			roles:
			    - geerlingguy.mysql

	ii. use role as an array of dictionary, this allow you to pass different options to the role such as to execute the roles by escalating the privilages, by specifing become directive or passing an additional parameters
		-
			name: Install and Configure MySQL 
			hosts: db-server
			roles:
			    - role: geerlingguy.mysql
			      become: yes
			      vars:
			        mysql_user_name: db-user




